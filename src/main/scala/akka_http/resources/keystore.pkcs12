* Export Private Key to File
*
* @throws Exception
*/
public static void exportPrivateKey() throws Exception {
    Security.addProvider(new
           org.bouncycastle.jce.provider.BouncyCastleProvider());

    KeyStore keystore = KeyStore.getInstance("PKCS12", "BC");

    keystore.load(new FileInputStream("mykeystore.pfx"),
                "lala".toCharArray());
    KeyPair keyPair = getPrivateKey(keystore, "mykeystore",
                "lala".toCharArray());
    PrivateKey privateKey = keyPair.getPrivate();

    /**
    * THIS DOES NOT WORK, GENERATES INCORRECT SEQUENCE
    *
    * String encoded = new String(Base64.encode(privateKey.getEncoded()));
    *
    * FileWriter fw = new FileWriter("private.key");
    * fw.write("-----BEGIN RSA PRIVATE KEY-----\n"); fw.write(encoded);
    * fw.write("\n"); fw.write("-----END RSA PRIVATE KEY-----");
    * fw.close();
    **/

    FileWriter fw = new FileWriter("private.pem");
    PEMWriter writer = new PEMWriter(fw);
    writer.writeObject(privateKey);
    writer.close();
}


/**
* Extract the Private Key from the Keystore.
*
* @param keystore
* @param alias
* @param password
* @return
*/
private static KeyPair getPrivateKey(KeyStore keystore, String alias,
            char[] password) {
    try {
        Key key = keystore.getKey(alias, password);
        if (key instanceof PrivateKey) {
            java.security.cert.Certificate cert = keystore
                    .getCertificate(alias);
            PublicKey publicKey = cert.getPublicKey();
            return new KeyPair(publicKey, (PrivateKey) key);
        }
    } catch (UnrecoverableKeyException e) {
    } catch (NoSuchAlgorithmException e) {
    } catch (KeyStoreException e) {
    }
    return null;
}
